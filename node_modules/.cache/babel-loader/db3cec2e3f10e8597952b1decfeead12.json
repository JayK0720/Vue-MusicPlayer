{"remainingRequest":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/babel-loader/lib/index.js!/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/eslint-loader/index.js??ref--13-0!/Users/jinkang/Desktop/Vue-MusicPlayer/src/common/js/dom.js","dependencies":[{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/src/common/js/dom.js","mtime":1570852012810},{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.regexp.constructor\";\n/判断是否有类名 和 添加 一个 类名/;\nexport function hasClass(ele, className) {\n  var reg = new RegExp('(^|\\\\s)' + className + '(\\\\s|$)'); // 匹配一段字符串中是否含有某个类名\n\n  return reg.test(ele.className);\n}\nexport function addClass(ele, className) {\n  if (hasClass(ele, className)) {\n    return;\n  } else {\n    var classArr = ele.className.split(' ');\n    classArr.push(className);\n    ele.className = classArr.join(' ');\n  }\n}\nvar elementStyle = document.createElement('div').style;\n\nvar vendor = function () {\n  var transformNames = {\n    webkit: 'webkitTransform',\n    ms: 'msTransform',\n    o: 'oTransform',\n    moz: 'mozTransform',\n    standard: 'transform'\n  };\n\n  for (var key in transformNames) {\n    if (elementStyle[transformNames[key]] !== undefined) {\n      return key;\n    }\n  }\n\n  return false;\n}();\n\nexport function prefixStyle(attr) {\n  if (vendor === false) return;\n\n  if (vendor === 'standard') {\n    return attr;\n  }\n\n  return vendor + attr.charAt(0).toUpperCase() + attr.substring(1);\n}",{"version":3,"sources":["/Users/jinkang/Desktop/Vue-MusicPlayer/src/common/js/dom.js"],"names":["hasClass","ele","className","reg","RegExp","test","addClass","classArr","split","push","join","elementStyle","document","createElement","style","vendor","transformNames","webkit","ms","o","moz","standard","key","undefined","prefixStyle","attr","charAt","toUpperCase","substring"],"mappings":";;AAAA;AACA,OAAO,SAASA,QAAT,CAAkBC,GAAlB,EAAsBC,SAAtB,EAAgC;AACtC,MAAIC,GAAG,GAAG,IAAIC,MAAJ,CAAW,YAAYF,SAAZ,GAAwB,SAAnC,CAAV,CADsC,CACmB;;AACzD,SAAOC,GAAG,CAACE,IAAJ,CAASJ,GAAG,CAACC,SAAb,CAAP;AACA;AAED,OAAO,SAASI,QAAT,CAAkBL,GAAlB,EAAsBC,SAAtB,EAAgC;AACtC,MAAGF,QAAQ,CAACC,GAAD,EAAKC,SAAL,CAAX,EAA2B;AAC1B;AACA,GAFD,MAEK;AACJ,QAAIK,QAAQ,GAAGN,GAAG,CAACC,SAAJ,CAAcM,KAAd,CAAoB,GAApB,CAAf;AACAD,IAAAA,QAAQ,CAACE,IAAT,CAAcP,SAAd;AACAD,IAAAA,GAAG,CAACC,SAAJ,GAAgBK,QAAQ,CAACG,IAAT,CAAc,GAAd,CAAhB;AACA;AACD;AAED,IAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,EAA8BC,KAAnD;;AAEA,IAAIC,MAAM,GAAI,YAAW;AACxB,MAAMC,cAAc,GAAG;AACtBC,IAAAA,MAAM,EAAC,iBADe;AAEtBC,IAAAA,EAAE,EAAC,aAFmB;AAGtBC,IAAAA,CAAC,EAAC,YAHoB;AAItBC,IAAAA,GAAG,EAAC,cAJkB;AAKtBC,IAAAA,QAAQ,EAAC;AALa,GAAvB;;AAOA,OAAI,IAAIC,GAAR,IAAeN,cAAf,EAA8B;AAC7B,QAAGL,YAAY,CAAEK,cAAc,CAACM,GAAD,CAAhB,CAAZ,KAAwCC,SAA3C,EAAqD;AACpD,aAAOD,GAAP;AACA;AACD;;AACD,SAAO,KAAP;AACA,CAdY,EAAb;;AAgBA,OAAO,SAASE,WAAT,CAAqBC,IAArB,EAA0B;AAChC,MAAGV,MAAM,KAAK,KAAd,EAAqB;;AACrB,MAAGA,MAAM,KAAK,UAAd,EAAyB;AACxB,WAAOU,IAAP;AACA;;AACD,SAAOV,MAAM,GAAGU,IAAI,CAACC,MAAL,CAAY,CAAZ,EAAeC,WAAf,EAAT,GAAwCF,IAAI,CAACG,SAAL,CAAe,CAAf,CAA/C;AACA","sourcesContent":["/判断是否有类名 和 添加 一个 类名/\nexport function hasClass(ele,className){\n\tlet reg = new RegExp('(^|\\\\s)' + className + '(\\\\s|$)');\t// 匹配一段字符串中是否含有某个类名\n\treturn reg.test(ele.className);\n}\n\nexport function addClass(ele,className){\n\tif(hasClass(ele,className)){\n\t\treturn;\n\t}else{\n\t\tlet classArr = ele.className.split(' ');\n\t\tclassArr.push(className);\n\t\tele.className = classArr.join(' ');\n\t}\n}\n\nconst elementStyle = document.createElement('div').style;\n\nlet vendor = (function (){\n\tconst transformNames = {\n\t\twebkit:'webkitTransform',\n\t\tms:'msTransform',\n\t\to:'oTransform',\n\t\tmoz:'mozTransform',\n\t\tstandard:'transform'\n\t}\n\tfor(let key in transformNames){\n\t\tif(elementStyle[ transformNames[key] ] !== undefined){\n\t\t\treturn key\n\t\t}\n\t}\n\treturn false\n})()\n\nexport function prefixStyle(attr){\n\tif(vendor === false) return;\n\tif(vendor === 'standard'){\n\t\treturn attr;\n\t}\n\treturn vendor + attr.charAt(0).toUpperCase() + attr.substring(1);\n}"]}]}