{"remainingRequest":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/babel-loader/lib/index.js!/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/eslint-loader/index.js??ref--13-0!/Users/jinkang/Desktop/Vue-MusicPlayer/src/common/js/jsonp.js","dependencies":[{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/src/common/js/jsonp.js","mtime":1570110027438},{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import OriginJsonp from 'jsonp';\nexport default function jsonp(url, data, options) {\n  // 先判断地址是否有？，如果有，则说明前面已经有查询字符串，第一个连接符是 &， 如果没有，则第一个字符串是？，再拼接后面的查询参数\n  url += (url.indexOf('?') < 0 ? '?' : '&') + param(data);\n  return new Promise(function (resolve, reject) {\n    OriginJsonp(url, options, function (err, data) {\n      if (!err) {\n        resolve(data);\n      } else {\n        reject(err);\n      }\n    });\n  });\n} // substring(start,stop) 截取[start,stop)之间的字符串，不包括stop的位置\n\nfunction param(obj) {\n  var url = '';\n\n  for (var key in obj) {\n    // 如果没有value值，则赋值为一个空字符串，将对象拼接为 字符串 &key=value 的形式，注意value需要解码\n    var value = obj[key] !== undefined ? obj[key] : '';\n    url += \"&\".concat(key, \"=\").concat(encodeURIComponent(value));\n  } // 如果有查询参数，即拼接的查询字符串不为空时，则删除第一个&连接符，否则没有查询参数时 url 为空字符串\n\n\n  return url ? url.substring(1) : '';\n}",{"version":3,"sources":["/Users/jinkang/Desktop/Vue-MusicPlayer/src/common/js/jsonp.js"],"names":["OriginJsonp","jsonp","url","data","options","indexOf","param","Promise","resolve","reject","err","obj","key","value","undefined","encodeURIComponent","substring"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,OAAxB;AAEA,eAAe,SAASC,KAAT,CAAeC,GAAf,EAAmBC,IAAnB,EAAwBC,OAAxB,EAAgC;AAC9C;AACAF,EAAAA,GAAG,IAAI,CAAEA,GAAG,CAACG,OAAJ,CAAY,GAAZ,IAAmB,CAAnB,GAAuB,GAAvB,GAA6B,GAA/B,IAAuCC,KAAK,CAACH,IAAD,CAAnD;AACA,SAAO,IAAII,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACtCT,IAAAA,WAAW,CAACE,GAAD,EAAKE,OAAL,EAAa,UAACM,GAAD,EAAKP,IAAL,EAAY;AACnC,UAAG,CAACO,GAAJ,EAAQ;AACPF,QAAAA,OAAO,CAACL,IAAD,CAAP;AACA,OAFD,MAEK;AACJM,QAAAA,MAAM,CAACC,GAAD,CAAN;AACA;AACD,KANU,CAAX;AAOA,GARM,CAAP;AASA,C,CACD;;AACA,SAASJ,KAAT,CAAeK,GAAf,EAAmB;AAClB,MAAIT,GAAG,GAAG,EAAV;;AACA,OAAI,IAAIU,GAAR,IAAeD,GAAf,EAAmB;AAClB;AACA,QAAIE,KAAK,GAAGF,GAAG,CAACC,GAAD,CAAH,KAAaE,SAAb,GAAyBH,GAAG,CAACC,GAAD,CAA5B,GAAoC,EAAhD;AACAV,IAAAA,GAAG,eAAQU,GAAR,cAAeG,kBAAkB,CAACF,KAAD,CAAjC,CAAH;AACA,GANiB,CAOlB;;;AACA,SAAOX,GAAG,GAAGA,GAAG,CAACc,SAAJ,CAAc,CAAd,CAAH,GAAsB,EAAhC;AACA","sourcesContent":["import OriginJsonp from 'jsonp'\n\nexport default function jsonp(url,data,options){\n\t// 先判断地址是否有？，如果有，则说明前面已经有查询字符串，第一个连接符是 &， 如果没有，则第一个字符串是？，再拼接后面的查询参数\n\turl += ( url.indexOf('?') < 0 ? '?' : '&' ) + param(data); \n\treturn new Promise((resolve,reject) => {\n\t\tOriginJsonp(url,options,(err,data)=>{\n\t\t\tif(!err){\n\t\t\t\tresolve(data);\n\t\t\t}else{\n\t\t\t\treject(err);\n\t\t\t}\n\t\t})\n\t})\n}\n// substring(start,stop) 截取[start,stop)之间的字符串，不包括stop的位置\nfunction param(obj){\n\tlet url = '';\n\tfor(let key in obj){\n\t\t// 如果没有value值，则赋值为一个空字符串，将对象拼接为 字符串 &key=value 的形式，注意value需要解码\n\t\tlet value = obj[key] !== undefined ? obj[key] : '';\n\t\turl += `&${key}=${encodeURIComponent(value)}`;\n\t}\n\t// 如果有查询参数，即拼接的查询字符串不为空时，则删除第一个&连接符，否则没有查询参数时 url 为空字符串\n\treturn url ? url.substring(1) : '';\n}"]}]}