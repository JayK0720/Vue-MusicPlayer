{"remainingRequest":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/babel-loader/lib/index.js!/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/eslint-loader/index.js??ref--13-0!/Users/jinkang/Desktop/Vue-MusicPlayer/src/store/actions.js","dependencies":[{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/src/store/actions.js","mtime":1573902060951},{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/jinkang/Desktop/Vue-MusicPlayer/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find-index\";\nimport { playMode } from '@/common/js/config';\nimport { shuffle } from '@/common/js/util';\nimport { savePlayHistory as _savePlayHistory, saveSearchHistory as _saveSearchHistory, clearSearchHistory as _clearSearchHistory, clearPlayHistory as _clearPlayHistory } from '@/common/js/cache';\n/*\n1. 当播放歌曲后,切换模式为随机播放的时候,此时已经修改了playList为 打乱后的播放列表 \n2. 当点击播放列表的歌曲时,此时点击的歌曲 和 实际播放列表里的歌曲不一致,比如点击的是第二首歌,实际可能点击的歌曲在打乱后的列表里的序号为第10 个 或 20\n\n解决方法:\n找到当前点击的序号为index的歌曲 在打乱后列表里在第几项，然后实际播放打乱列表里 找到的这首歌曲。\n*/\n\nfunction findIndex(list, song) {\n  return list.findIndex(function (item) {\n    return item.songid === song.songid;\n  });\n}\n\nvar actions = {\n  selectPlay: function selectPlay(_ref, _ref2) {\n    var commit = _ref.commit,\n        state = _ref.state;\n    var list = _ref2.list,\n        index = _ref2.index,\n        song = _ref2.song;\n    commit('SET_SEQUENCE_LIST', list);\n\n    if (state.mode === playMode.random) {\n      var randomList = shuffle(list);\n      commit('SET_PLAY_LIST', randomList);\n      index = findIndex(randomList, list[index]);\n    } else {\n      commit('SET_PLAY_LIST', list);\n    }\n\n    commit('SET_PLAYING', true);\n    commit('SET_CURRENT_INDEX', index);\n  },\n\n  /*\n  点击按钮全部播放的时候,如果此时播放模式是随机播放,打乱播放歌曲的顺序\n  */\n  playAllMusic: function playAllMusic(_ref3, _ref4) {\n    var commit = _ref3.commit,\n        state = _ref3.state;\n    var list = _ref4.list,\n        index = _ref4.index;\n\n    if (state.mode === playMode.random) {\n      var randomList = shuffle(list);\n      commit('SET_PLAY_LIST', randomList);\n    } else {\n      commit('SET_PLAY_LIST', list);\n    }\n\n    commit('SET_PLAYING', true);\n    commit('SET_SEQUENCE_LIST', list);\n    commit('SET_CURRENT_INDEX', index);\n    commit('SET_FULL_SCREEN', true);\n  },\n\n  /*\n  点击搜索列表项时插入歌曲\n  1. 先获取当前的播放列表, playList sequenceList 以及当前歌曲在播放列表中的位置 currentIndex \n  2. 将歌曲插入当前播放歌曲的下一个位置\n  3. 判断添加的歌曲是否已经存在于当前播放列表中,如果存在则删除已经存在的歌曲\n  */\n  insertSong: function insertSong(_ref5, song) {\n    var commit = _ref5.commit,\n        state = _ref5.state;\n\n    var playList = _toConsumableArray(state.playList);\n\n    var sequenceList = state.sequenceList.slice();\n    var currentIndex = state.currentIndex; // 当前歌曲\n\n    var currentSong = playList[currentIndex];\n    /*\n     判断添加的歌曲是否已经存在于当前的播放列表，如果存在，则求出已存在的歌曲在播放列表中的序号\n    tips: 应该先判断,然后再添加歌曲\n     */\n\n    var fdIndex = playList.findIndex(function (item) {\n      return item.songid === song.songid;\n    });\n    currentIndex++; // 添加到当前播放歌曲的下一首,否则添加的是当前歌曲的前一个位置\n\n    playList.splice(currentIndex, 0, song);\n    /*\n    如果大于-1,说明当前歌曲播放列表中有此歌曲. 此时有两种情况:\n    1. 已经存在的歌曲在插入到播放列表位置的前面 \n    当前播放的列表\t\t\t插入一首搜索歌曲后的列表  \t\t删除重复的歌曲\n    currentIndex:4   fdIndex:1\n    [1,2,3,4,5,6,7] -----> [1,2,3,4,5,2,6,7]\t------> [1,3,4,5,2,6,7]\n    \n    2. 已经存在的歌曲在插入到播放列表位置的后面\n    currentIndex:0\tfdIndex:5\n    [1,2,3,4,5,6,7] -----> [1,6,2,3,4,5,6,7]  ------> [1,6,2,3,4,5,7]\n    */\n\n    if (fdIndex > -1) {\n      if (currentIndex > fdIndex) {\n        playList.splice(fdIndex, 1);\n        currentIndex--;\n      } else {\n        playList.splice(fdIndex + 1, 1);\n      }\n    } // 当前播放的歌曲在顺序列表的位置+1,表示点击的歌曲要插入到播放列表里的位置.\n\n\n    var currentSIndex = findIndex(sequenceList, currentSong) + 1; // 点击的歌曲是否已经存在于sequenceList\n\n    var fdSIndex = findIndex(sequenceList, song);\n    sequenceList.splice(currentSIndex, 0, song);\n\n    if (fdSIndex > -1) {\n      if (currentSIndex > fdSIndex) {\n        sequenceList.splice(fdSIndex, 1);\n      } else {\n        sequenceList.splice(fdSIndex + 1, 1);\n      }\n    }\n\n    commit('SET_PLAY_LIST', playList);\n    commit('SET_SEQUENCE_LIST', sequenceList);\n    commit('SET_CURRENT_INDEX', currentIndex);\n    commit('SET_PLAYING', true);\n    commit('SET_FULL_SCREEN', true);\n  },\n  savePlayHistory: function savePlayHistory(_ref6, song) {\n    var commit = _ref6.commit,\n        state = _ref6.state;\n    commit('SET_PLAY_HISTORY', _savePlayHistory(song));\n  },\n  saveSearchHistory: function saveSearchHistory(_ref7, song) {\n    var commit = _ref7.commit,\n        state = _ref7.state;\n    commit('SET_SEARCH_HISTORY', _saveSearchHistory(song));\n  },\n\n  /* 清除搜索历史,需要清空缓存里的搜索历史,并将search_history设置为空数组*/\n  clearSearchHistory: function clearSearchHistory(_ref8) {\n    var commit = _ref8.commit,\n        state = _ref8.state;\n    commit('SET_SEARCH_HISTORY', _clearSearchHistory());\n\n    _clearSearchHistory();\n  },\n  clearPlayHistory: function clearPlayHistory(_ref9) {\n    var commit = _ref9.commit,\n        state = _ref9.state;\n    commit('SET_PLAY_HISTORY', _clearPlayHistory());\n  }\n};\nexport default actions;",{"version":3,"sources":["/Users/jinkang/Desktop/Vue-MusicPlayer/src/store/actions.js"],"names":["playMode","shuffle","savePlayHistory","saveSearchHistory","clearSearchHistory","clearPlayHistory","findIndex","list","song","item","songid","actions","selectPlay","commit","state","index","mode","random","randomList","playAllMusic","insertSong","playList","sequenceList","slice","currentIndex","currentSong","fdIndex","splice","currentSIndex","fdSIndex"],"mappings":";;AAAA,SAAQA,QAAR,QAAuB,oBAAvB;AACA,SAAQC,OAAR,QAAsB,kBAAtB;AACA,SAAQC,eAAe,IAAfA,gBAAR,EAAwBC,iBAAiB,IAAjBA,kBAAxB,EAA0CC,kBAAkB,IAAlBA,mBAA1C,EAA6DC,gBAAgB,IAAhBA,iBAA7D,QAAoF,mBAApF;AACA;;;;;;;;AAOA,SAASC,SAAT,CAAmBC,IAAnB,EAAwBC,IAAxB,EAA6B;AAC5B,SAAOD,IAAI,CAACD,SAAL,CAAe,UAACG,IAAD,EAAU;AAC/B,WAAOA,IAAI,CAACC,MAAL,KAAgBF,IAAI,CAACE,MAA5B;AACA,GAFM,CAAP;AAGA;;AAED,IAAMC,OAAO,GAAG;AACfC,EAAAA,UADe,mCAC6B;AAAA,QAAhCC,MAAgC,QAAhCA,MAAgC;AAAA,QAAzBC,KAAyB,QAAzBA,KAAyB;AAAA,QAAjBP,IAAiB,SAAjBA,IAAiB;AAAA,QAAZQ,KAAY,SAAZA,KAAY;AAAA,QAANP,IAAM,SAANA,IAAM;AAC3CK,IAAAA,MAAM,CAAC,mBAAD,EAAqBN,IAArB,CAAN;;AACA,QAAGO,KAAK,CAACE,IAAN,KAAehB,QAAQ,CAACiB,MAA3B,EAAkC;AACjC,UAAIC,UAAU,GAAGjB,OAAO,CAACM,IAAD,CAAxB;AACAM,MAAAA,MAAM,CAAC,eAAD,EAAiBK,UAAjB,CAAN;AACAH,MAAAA,KAAK,GAAGT,SAAS,CAACY,UAAD,EAAYX,IAAI,CAACQ,KAAD,CAAhB,CAAjB;AACA,KAJD,MAIK;AACJF,MAAAA,MAAM,CAAC,eAAD,EAAiBN,IAAjB,CAAN;AACA;;AACDM,IAAAA,MAAM,CAAC,aAAD,EAAe,IAAf,CAAN;AACAA,IAAAA,MAAM,CAAC,mBAAD,EAAqBE,KAArB,CAAN;AACA,GAZc;;AAaf;;;AAGAI,EAAAA,YAhBe,sCAgB0B;AAAA,QAA3BN,MAA2B,SAA3BA,MAA2B;AAAA,QAApBC,KAAoB,SAApBA,KAAoB;AAAA,QAAZP,IAAY,SAAZA,IAAY;AAAA,QAAPQ,KAAO,SAAPA,KAAO;;AACxC,QAAGD,KAAK,CAACE,IAAN,KAAehB,QAAQ,CAACiB,MAA3B,EAAkC;AACjC,UAAIC,UAAU,GAAGjB,OAAO,CAACM,IAAD,CAAxB;AACAM,MAAAA,MAAM,CAAC,eAAD,EAAiBK,UAAjB,CAAN;AACA,KAHD,MAGK;AACJL,MAAAA,MAAM,CAAC,eAAD,EAAiBN,IAAjB,CAAN;AACA;;AACDM,IAAAA,MAAM,CAAC,aAAD,EAAe,IAAf,CAAN;AACAA,IAAAA,MAAM,CAAC,mBAAD,EAAqBN,IAArB,CAAN;AACAM,IAAAA,MAAM,CAAC,mBAAD,EAAqBE,KAArB,CAAN;AACAF,IAAAA,MAAM,CAAC,iBAAD,EAAmB,IAAnB,CAAN;AACA,GA3Bc;;AA4Bf;;;;;;AAMEO,EAAAA,UAlCa,6BAkCaZ,IAlCb,EAkCkB;AAAA,QAAnBK,MAAmB,SAAnBA,MAAmB;AAAA,QAAZC,KAAY,SAAZA,KAAY;;AAC9B,QAAIO,QAAQ,sBAAOP,KAAK,CAACO,QAAb,CAAZ;;AACA,QAAIC,YAAY,GAAGR,KAAK,CAACQ,YAAN,CAAmBC,KAAnB,EAAnB;AACA,QAAIC,YAAY,GAAGV,KAAK,CAACU,YAAzB,CAH8B,CAI9B;;AACA,QAAIC,WAAW,GAAGJ,QAAQ,CAACG,YAAD,CAA1B;AACA;;;;;AAIA,QAAME,OAAO,GAAGL,QAAQ,CAACf,SAAT,CAAmB,UAACG,IAAD,EAAU;AAC1C,aAAOA,IAAI,CAACC,MAAL,KAAgBF,IAAI,CAACE,MAA5B;AACF,KAFe,CAAhB;AAGAc,IAAAA,YAAY,GAbkB,CAad;;AAChBH,IAAAA,QAAQ,CAACM,MAAT,CAAgBH,YAAhB,EAA6B,CAA7B,EAA+BhB,IAA/B;AACD;;;;;;;;;;;;AAWA,QAAGkB,OAAO,GAAG,CAAC,CAAd,EAAgB;AACjB,UAAGF,YAAY,GAAGE,OAAlB,EAA0B;AACzBL,QAAAA,QAAQ,CAACM,MAAT,CAAgBD,OAAhB,EAAwB,CAAxB;AACAF,QAAAA,YAAY;AACZ,OAHD,MAGK;AACJH,QAAAA,QAAQ,CAACM,MAAT,CAAgBD,OAAO,GAAC,CAAxB,EAA0B,CAA1B;AACA;AACC,KAjC8B,CAmC/B;;;AACA,QAAIE,aAAa,GAAGtB,SAAS,CAACgB,YAAD,EAAcG,WAAd,CAAT,GAAsC,CAA1D,CApC+B,CAqC/B;;AACA,QAAII,QAAQ,GAAGvB,SAAS,CAACgB,YAAD,EAAcd,IAAd,CAAxB;AAEAc,IAAAA,YAAY,CAACK,MAAb,CAAoBC,aAApB,EAAkC,CAAlC,EAAoCpB,IAApC;;AAEA,QAAGqB,QAAQ,GAAG,CAAC,CAAf,EAAiB;AAChB,UAAGD,aAAa,GAAGC,QAAnB,EAA4B;AAC3BP,QAAAA,YAAY,CAACK,MAAb,CAAoBE,QAApB,EAA6B,CAA7B;AACA,OAFD,MAEK;AACJP,QAAAA,YAAY,CAACK,MAAb,CAAoBE,QAAQ,GAAC,CAA7B,EAA+B,CAA/B;AACA;AACD;;AACDhB,IAAAA,MAAM,CAAC,eAAD,EAAiBQ,QAAjB,CAAN;AACAR,IAAAA,MAAM,CAAC,mBAAD,EAAqBS,YAArB,CAAN;AACAT,IAAAA,MAAM,CAAC,mBAAD,EAAqBW,YAArB,CAAN;AACAX,IAAAA,MAAM,CAAC,aAAD,EAAe,IAAf,CAAN;AACAA,IAAAA,MAAM,CAAC,iBAAD,EAAmB,IAAnB,CAAN;AACC,GAxFY;AAyFbX,EAAAA,eAzFa,kCAyFkBM,IAzFlB,EAyFuB;AAAA,QAAnBK,MAAmB,SAAnBA,MAAmB;AAAA,QAAZC,KAAY,SAAZA,KAAY;AACnCD,IAAAA,MAAM,CAAC,kBAAD,EAAoBX,gBAAe,CAACM,IAAD,CAAnC,CAAN;AACA,GA3FY;AA4FbL,EAAAA,iBA5Fa,oCA4FoBK,IA5FpB,EA4FyB;AAAA,QAAnBK,MAAmB,SAAnBA,MAAmB;AAAA,QAAZC,KAAY,SAAZA,KAAY;AACrCD,IAAAA,MAAM,CAAC,oBAAD,EAAsBV,kBAAiB,CAACK,IAAD,CAAvC,CAAN;AACA,GA9FY;;AA+Fb;AACAJ,EAAAA,kBAhGa,qCAgGqB;AAAA,QAAdS,MAAc,SAAdA,MAAc;AAAA,QAAPC,KAAO,SAAPA,KAAO;AACjCD,IAAAA,MAAM,CAAC,oBAAD,EAAsBT,mBAAkB,EAAxC,CAAN;;AACAA,IAAAA,mBAAkB;AAClB,GAnGY;AAoGbC,EAAAA,gBApGa,mCAoGmB;AAAA,QAAdQ,MAAc,SAAdA,MAAc;AAAA,QAAPC,KAAO,SAAPA,KAAO;AAC/BD,IAAAA,MAAM,CAAC,kBAAD,EAAoBR,iBAAgB,EAApC,CAAN;AACA;AAtGY,CAAhB;AAwGA,eAAeM,OAAf","sourcesContent":["import {playMode} from '@/common/js/config'\nimport {shuffle} from '@/common/js/util'\nimport {savePlayHistory,saveSearchHistory,clearSearchHistory,clearPlayHistory} from '@/common/js/cache'\n/*\n1. 当播放歌曲后,切换模式为随机播放的时候,此时已经修改了playList为 打乱后的播放列表 \n2. 当点击播放列表的歌曲时,此时点击的歌曲 和 实际播放列表里的歌曲不一致,比如点击的是第二首歌,实际可能点击的歌曲在打乱后的列表里的序号为第10 个 或 20\n\n解决方法:\n找到当前点击的序号为index的歌曲 在打乱后列表里在第几项，然后实际播放打乱列表里 找到的这首歌曲。\n*/\nfunction findIndex(list,song){\n\treturn list.findIndex((item) => {\n\t\treturn item.songid === song.songid;\n\t})\n}\n\nconst actions = {\n\tselectPlay({commit,state},{list,index,song}){\n\t\tcommit('SET_SEQUENCE_LIST',list);\n\t\tif(state.mode === playMode.random){\n\t\t\tlet randomList = shuffle(list);\n\t\t\tcommit('SET_PLAY_LIST',randomList);\n\t\t\tindex = findIndex(randomList,list[index]);\n\t\t}else{\n\t\t\tcommit('SET_PLAY_LIST',list);\n\t\t}\n\t\tcommit('SET_PLAYING',true);\n\t\tcommit('SET_CURRENT_INDEX',index);\n\t},\n\t/*\n\t点击按钮全部播放的时候,如果此时播放模式是随机播放,打乱播放歌曲的顺序\n\t*/\n\tplayAllMusic({commit,state},{list,index}){\n\t\tif(state.mode === playMode.random){\n\t\t\tlet randomList = shuffle(list);\n\t\t\tcommit('SET_PLAY_LIST',randomList);\n\t\t}else{\n\t\t\tcommit('SET_PLAY_LIST',list);\n\t\t}\n\t\tcommit('SET_PLAYING',true);\n\t\tcommit('SET_SEQUENCE_LIST',list);\n\t\tcommit('SET_CURRENT_INDEX',index);\n\t\tcommit('SET_FULL_SCREEN',true);\n\t},\n\t/*\n\t点击搜索列表项时插入歌曲\n\t1. 先获取当前的播放列表, playList sequenceList 以及当前歌曲在播放列表中的位置 currentIndex \n\t2. 将歌曲插入当前播放歌曲的下一个位置\n\t3. 判断添加的歌曲是否已经存在于当前播放列表中,如果存在则删除已经存在的歌曲\n\t*/\n   insertSong({commit,state},song){\n\t   let playList = [...state.playList];\n\t   let sequenceList = state.sequenceList.slice();\n\t   let currentIndex = state.currentIndex;\n\t   // 当前歌曲\n\t   let currentSong = playList[currentIndex];\n\t   /*\n\t    判断添加的歌曲是否已经存在于当前的播放列表，如果存在，则求出已存在的歌曲在播放列表中的序号\n\t\ttips: 应该先判断,然后再添加歌曲\n\t    */\n\t   const fdIndex = playList.findIndex((item) => {\n\t   \t\t return item.songid === song.songid;\n\t   });\n\t   currentIndex++;\t// 添加到当前播放歌曲的下一首,否则添加的是当前歌曲的前一个位置\n\t   playList.splice(currentIndex,0,song);\n\t  /*\n\t  如果大于-1,说明当前歌曲播放列表中有此歌曲. 此时有两种情况:\n\t  1. 已经存在的歌曲在插入到播放列表位置的前面 \n\t\t当前播放的列表\t\t\t插入一首搜索歌曲后的列表  \t\t删除重复的歌曲\n\t\tcurrentIndex:4   fdIndex:1\n\t  [1,2,3,4,5,6,7] -----> [1,2,3,4,5,2,6,7]\t------> [1,3,4,5,2,6,7]\n\t  \n\t  2. 已经存在的歌曲在插入到播放列表位置的后面\n\t  currentIndex:0\tfdIndex:5\n\t  [1,2,3,4,5,6,7] -----> [1,6,2,3,4,5,6,7]  ------> [1,6,2,3,4,5,7]\n\t  */\n\t  if(fdIndex > -1){\n\t\tif(currentIndex > fdIndex){\n\t\t\tplayList.splice(fdIndex,1);\n\t\t\tcurrentIndex--;\n\t\t}else{\n\t\t\tplayList.splice(fdIndex+1,1);\n\t\t}\n\t  }\n\t  \n\t  // 当前播放的歌曲在顺序列表的位置+1,表示点击的歌曲要插入到播放列表里的位置.\n\t  let currentSIndex = findIndex(sequenceList,currentSong) + 1;\n\t  // 点击的歌曲是否已经存在于sequenceList\n\t  let fdSIndex = findIndex(sequenceList,song);\n\t  \n\t  sequenceList.splice(currentSIndex,0,song);\n\t  \n\t  if(fdSIndex > -1){\n\t\t  if(currentSIndex > fdSIndex){\n\t\t\t  sequenceList.splice(fdSIndex,1);\n\t\t  }else{\n\t\t\t  sequenceList.splice(fdSIndex+1,1);\n\t\t  }\n\t  }\n\t  commit('SET_PLAY_LIST',playList);\n\t  commit('SET_SEQUENCE_LIST',sequenceList);\n\t  commit('SET_CURRENT_INDEX',currentIndex);\n\t  commit('SET_PLAYING',true);\n\t  commit('SET_FULL_SCREEN',true)\n   },\n   savePlayHistory({commit,state},song){\n\t   commit('SET_PLAY_HISTORY',savePlayHistory(song));\n   },\n   saveSearchHistory({commit,state},song){\n\t   commit('SET_SEARCH_HISTORY',saveSearchHistory(song));\n   },\n   /* 清除搜索历史,需要清空缓存里的搜索历史,并将search_history设置为空数组*/\n   clearSearchHistory({commit,state}){\n\t   commit('SET_SEARCH_HISTORY',clearSearchHistory())\n\t   clearSearchHistory();\n   },\n   clearPlayHistory({commit,state}){\n\t   commit('SET_PLAY_HISTORY',clearPlayHistory());\n   }\n} \nexport default actions;"]}]}